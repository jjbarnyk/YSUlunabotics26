#include <WiFi.h>
#include <Servo.h>

const char* ssid = "Lunabotics_25";  // Replace with your network SSID
const char* password = "ysu12345";  // Replace with your network password

IPAddress local_IP(192, 168, 0, 101);  // Desired static IP for Arduino
IPAddress gateway(192, 168, 0, 254);   // Replace with your router's IP address
IPAddress subnet(255, 255, 255, 0);    // Replace with your network subnet

WiFiServer server(12345);  // Replace with your chosen port number

Servo motor1;
Servo motor2;
Servo motor3;
Servo motor4;

void setup() {
  Serial.begin(9600);
  motor1.attach(9, 1000, 2000);  // Attach motor1 to pin 9 with pulse range 1000-2000
  motor2.attach(10, 1000, 2000); // Attach motor2 to pin 10 with pulse range 1000-2000
  motor3.attach(11, 1000, 2000); // Attach motor3 to pin 11 with pulse range 1000-2000
  motor4.attach(12, 1000, 2000); // Attach motor4 to pin 12 with pulse range 1000-2000

  WiFi.config(local_IP, gateway, subnet);
  WiFi.begin(ssid, password);

  unsigned long startAttemptTime = millis();

  // Keep trying to connect for 30 seconds
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 30000) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    server.begin();
  } else {
    Serial.println("Failed to connect to WiFi");
  }
}

void loop() {
  WiFiClient client = server.available();
  if (client) {
    while (client.connected()) {
      if (client.available() > 0) {
        String data = client.readStringUntil('\n');
        Serial.println("Received data: " + data);  // Debug print
        int commaIndex = data.indexOf(',');
        int left_motor = data.substring(0, commaIndex).toInt();
        int right_motor = data.substring(commaIndex + 1).toInt();

        // Print the received values for debugging
        Serial.print("Left motor value: ");
        Serial.println(left_motor);
        Serial.print("Right motor value: ");
        Serial.println(right_motor);

        // Directly use the received values to control the motors
        motor1.writeMicroseconds(left_motor);
        motor2.writeMicroseconds(left_motor);
        motor3.writeMicroseconds(right_motor);
        motor4.writeMicroseconds(right_motor);
      }
    }
  } else {
    // Stop the motors if the socket is disconnected
    motor1.writeMicroseconds(1500);  // Neutral position
    motor2.writeMicroseconds(1500);  // Neutral position
    motor3.writeMicroseconds(1500);  // Neutral position
    motor4.writeMicroseconds(1500);  // Neutral position
  }
}