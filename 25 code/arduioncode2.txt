
#include <WiFi.h>
#include <Servo.h>

// WiFi configuration
const char* ssid = "Lunabotics_25";
const char* password = "ysu12345";

IPAddress local_IP(192, 168, 0, 101);
IPAddress gateway(192, 168, 0, 254);
IPAddress subnet(255, 255, 255, 0);

WiFiServer server(12345);

// Motors for driving
Servo motor1;
Servo motor2;
Servo motor3;
Servo motor4;

// Servo for vertical control
Servo servoVert;

// Initialize vertical servo position to 1500us
int vertical_servo_position = 1500;

void setup() {
  Serial.begin(9600);

  // Attach motors
  motor1.attach(9, 1000, 2000);
  motor2.attach(10, 1000, 2000);
  motor3.attach(11, 1000, 2000);
  motor4.attach(12, 1000, 2000);

  // Attach vertical servo
  servoVert.attach(6, 1000, 2000);  // e.g. pin 6

  WiFi.config(local_IP, gateway, subnet);
  WiFi.begin(ssid, password);

  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 30000) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    server.begin();
  } else {
    Serial.println("Failed to connect to WiFi");
  }
}

void loop() {
  WiFiClient client = server.available();
  if (client) {
    while (client.connected()) {
      if (client.available() > 0) {
        String data = client.readStringUntil('\n');
        Serial.println("Received data: " + data);

        // Split input string into three PWM values
        int firstComma = data.indexOf(',');
        int secondComma = data.indexOf(',', firstComma + 1);

        if (firstComma > 0 && secondComma > firstComma) {
          int left_motor = data.substring(0, firstComma).toInt();
          int right_motor = data.substring(firstComma + 1, secondComma).toInt();
          int vertical_servo = data.substring(secondComma + 1).toInt();

          // Debug output
          Serial.print("Left motor: "); Serial.println(left_motor);
          Serial.print("Right motor: "); Serial.println(right_motor);
          Serial.print("Vertical servo: "); Serial.println(vertical_servo);

          // Drive motors
          motor1.writeMicroseconds(left_motor);
          motor2.writeMicroseconds(left_motor);
          motor3.writeMicroseconds(right_motor);
          motor4.writeMicroseconds(right_motor);

          // Update vertical servo position only if it changes
          if (vertical_servo != vertical_servo_position) {
            vertical_servo_position = vertical_servo;
            servoVert.writeMicroseconds(vertical_servo_position);
          }
        }
      }
    }
  } else {
    // Stop all motors when disconnected
    motor1.writeMicroseconds(1500);
    motor2.writeMicroseconds(1500);
    motor3.writeMicroseconds(1500);
    motor4.writeMicroseconds(1500);
    servoVert.writeMicroseconds(vertical_servo_position);
  }
}


